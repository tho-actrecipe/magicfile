# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  workflow_run:
    workflows: [ "CI" ]
    types:
      - completed
    branches:
      - master

permissions:
  contents: read

jobs:
  deploy-macos:
    runs-on: macos-latest
    environment: production
    strategy:
      matrix:
        python-version: [ 3.8, 3.9, "3.10", 3.11 ]
        arch: [ x86_64, arm64 ]

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies (Homebrew)
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            arch -arm64 brew install libmagic
          else
            brew install libmagic
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel delocate

      - name: Build macOS wheels
        run: |
          mkdir -p dist
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            arch -arm64 python setup.py bdist_wheel
          else
            arch -x86_64 python setup.py bdist_wheel
          fi
          delocate-wheel -v dist/*.whl
          ls -lrth dist/

      - name: Publish package
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  deploy-linux:
    runs-on: ubuntu-20.04
    environment: production
    strategy:
      matrix:
        python-version: [ 3.8, 3.9, "3.10", 3.11 ]
        arch: [ x86_64, aarch64 ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install QEMU for ARM builds
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu qemu-user-static

      - name: Build manylinux wheels
        run: |
          # Ensure project files are accessible to Docker container
          PROJECT_DIR=`pwd`
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            docker run --platform linux/amd64 --rm \
              -v $PROJECT_DIR:/io \
              quay.io/pypa/manylinux2014_x86_64 \
              /opt/python/cp${{ matrix.python-version//./}}-cp${{ matrix.python-version//./}}/bin/python /io/setup.py bdist_wheel
          elif [ "${{ matrix.arch }}" = "aarch64" ]; then
            docker run --platform linux/arm64 --rm \
              -v $PROJECT_DIR:/io \
              quay.io/pypa/manylinux2014_aarch64 \
              /opt/python/cp${{ matrix.python-version//./}}-cp${{ matrix.python-version//./}}/bin/python /io/setup.py bdist_wheel
          fi
          ls -lrth dist/

      - name: Publish package
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
