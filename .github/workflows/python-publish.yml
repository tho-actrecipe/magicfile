# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  workflow_run:
    workflows: [ "CI" ]
    types:
      - completed

permissions:
  contents: read

jobs:
  deploy-macos:
    runs-on: ${{ matrix.os }}
    environment: production
    strategy:
      matrix:
        os: [ macos-13 ]
        python-version: [3.8, 3.9, "3.10", 3.11]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Build manylinux wheels
        run: |
          wget -O /tmp/file.tar.gz http://archive.ubuntu.com/ubuntu/pool/main/f/file/file_5.38.orig.tar.gz
          cd /tmp && tar zxf file.tar.gz && cd -
          cd /tmp/file-5.38 && ./configure --prefix=/usr/local && make && sudo make install && cd -
          pip install wheel delocate
          python setup.py bdist_wheel
          delocate-wheel -v dist/*.whl
          ls -lrth dist/
      - name: Publish package
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  deploy-macos-arm64:
    runs-on: ${{ matrix.os }}
    environment: production
    strategy:
      matrix:
        os: [ macos-13 ]
        python-version: [ "3.10", 3.11 ]

    steps:
      - uses: actions/checkout@v4

      - name: Install universal2 Python
        run: |
          if [[ ${{ matrix.python-version }} == "3.10" ]]; then
            curl -o python3.10.pkg https://www.python.org/ftp/python/3.10.11/python-3.10.11-macos11.pkg
            sudo installer -pkg python3.10.pkg -target /
          elif [[ ${{ matrix.python-version }} == "3.11" ]]; then
            curl -o python3.11.pkg https://www.python.org/ftp/python/3.11.9/python-3.11.9-macos11.pkg
            sudo installer -pkg python3.11.pkg -target /
          fi
          python3 --version

      - name: Display Python version
        run: python3 -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install wheel delocate

      - name: Build universal2 wheel
        run: |
          wget -O /tmp/file.tar.gz http://archive.ubuntu.com/ubuntu/pool/main/f/file/file_5.38.orig.tar.gz
          cd /tmp && tar zxf file.tar.gz && cd -
          cd /tmp/file-5.38 && ./configure --prefix=/usr/local && make && sudo make install && cd -
          CFLAGS="-arch x86_64 -arch arm64" LDFLAGS="-arch x86_64 -arch arm64" python3 setup.py bdist_wheel
          delocate-wheel -v dist/*.whl
          ls -lrth dist/

      - name: Publish package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python3 -m pip install --upgrade twine
          twine upload --skip-existing dist/*

  deploy-linux:
    runs-on: ${{ matrix.os }}
    environment: production
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.8, 3.9, "3.10", 3.11 ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Build manylinux wheels
        run: |
          docker run --rm -v `pwd`:/io -w /io quay.io/pypa/manylinux2014_x86_64 sh manylinux.sh
          ls -lrth dist/
      - name: Publish package
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  deploy-linux-arm64:
    runs-on: ${{ matrix.os }}
    environment: production
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ "3.10", 3.11 ]
        arch: [ aarch64 ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Enable QEMU for cross-platform builds
        run: |
          sudo apt-get install -y qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build manylinux wheels
        run: |
          docker run --platform linux/arm64 --rm -v `pwd`:/io -w /io quay.io/pypa/manylinux2014_aarch64 sh manylinux.sh
          ls -lrth dist/
      - name: Publish package
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
